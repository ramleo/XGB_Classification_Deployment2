def metric_cal(model=None, data=None, target=None):
    '''
    A function for calculating the metrics such as accuracy_score, recall_score, precision_score, f1_score, fbeta_score,
    roc_auc_score, cohen_kappa_score, hinge_loss, hamming_loss, log_loss using a model, and returning a dictionary that
    can be converted into a pandas dataframe
    '''
    from sklearn.metrics import (accuracy_score, recall_score, precision_score, f1_score, fbeta_score,
                                roc_auc_score, cohen_kappa_score, hinge_loss, hamming_loss, log_loss)

    feat_sel = [fclass_feat, freg_feat, selk_class_feat, selk_reg_feat, sfm_dt_feat, sfm_rf_feat,
                sfm_xgb_feat, sfm_log_feat, selp_class_feat, selp_reg_feat, vt_feat_50]

    fs_model_dict = {'fclass': list(),
                     'freg': list(),
                     'selk_class': list(),
                     'selk_reg': list(),
                     'sfm_dt': list(),
                     'sfm_rf': list(),
                     'sfm_xgb': list(),
                     'sfm_log': list(),
                     'selp_class': list(),
                     'selp_reg': list(),
                     'vt_50': list()
                     }

    # 1
    y_pred_fclass = model.fit(data[fclass_feat], target).predict(data[fclass_feat])
    accuracy = round(accuracy_score(target, y_pred_fclass), 2)
    recall = round(recall_score(target, y_pred_fclass), 2)
    precision = round(precision_score(target, y_pred_fclass), 2)
    f1 = round(f1_score(target, y_pred_fclass), 2)
    fbeta = round(fbeta_score(target, y_pred_fclass, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_fclass), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_fclass), 2)
    hin_loss = round(hinge_loss(target, y_pred_fclass), 2)
    ham_loss = round(hamming_loss(target, y_pred_fclass), 2)
    logl_loss = round(log_loss(target, y_pred_fclass), 2)
    fs_model_dict['fclass'].append(accuracy)
    fs_model_dict['fclass'].append(recall)
    fs_model_dict['fclass'].append(precision)
    fs_model_dict['fclass'].append(f1)
    fs_model_dict['fclass'].append(fbeta)
    fs_model_dict['fclass'].append(roc_auc)
    fs_model_dict['fclass'].append(cohen_kappa)
    fs_model_dict['fclass'].append(hin_loss)
    fs_model_dict['fclass'].append(ham_loss)
    fs_model_dict['fclass'].append(logl_loss)

    # 2
    y_pred_freg = model.fit(data[freg_feat], target).predict(data[freg_feat])
    accuracy = round(accuracy_score(target, y_pred_freg), 2)
    recall = round(recall_score(target, y_pred_freg), 2)
    precision = round(precision_score(target, y_pred_freg), 2)
    f1 = round(f1_score(target, y_pred_freg), 2)
    fbeta = round(fbeta_score(target, y_pred_freg, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_freg), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_freg), 2)
    hin_loss = round(hinge_loss(target, y_pred_freg), 2)
    ham_loss = round(hamming_loss(target, y_pred_freg), 2)
    logl_loss = round(log_loss(target, y_pred_freg), 2)
    fs_model_dict['freg'].append(accuracy)
    fs_model_dict['freg'].append(recall)
    fs_model_dict['freg'].append(precision)
    fs_model_dict['freg'].append(f1)
    fs_model_dict['freg'].append(fbeta)
    fs_model_dict['freg'].append(roc_auc)
    fs_model_dict['freg'].append(cohen_kappa)
    fs_model_dict['freg'].append(hin_loss)
    fs_model_dict['freg'].append(ham_loss)
    fs_model_dict['freg'].append(logl_loss)

    # 3
    y_pred_selk_class = model.fit(data[selk_class_feat], target).predict(data[selk_class_feat])
    accuracy = round(accuracy_score(target, y_pred_selk_class), 2)
    recall = round(recall_score(target, y_pred_selk_class), 2)
    precision = round(precision_score(target, y_pred_selk_class), 2)
    f1 = round(f1_score(target, y_pred_selk_class), 2)
    fbeta = round(fbeta_score(target, y_pred_selk_class, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_selk_class), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_selk_class), 2)
    hin_loss = round(hinge_loss(target, y_pred_selk_class), 2)
    ham_loss = round(hamming_loss(target, y_pred_selk_class), 2)
    logl_loss = round(log_loss(target, y_pred_selk_class), 2)
    fs_model_dict['selk_class'].append(accuracy)
    fs_model_dict['selk_class'].append(recall)
    fs_model_dict['selk_class'].append(precision)
    fs_model_dict['selk_class'].append(f1)
    fs_model_dict['selk_class'].append(fbeta)
    fs_model_dict['selk_class'].append(roc_auc)
    fs_model_dict['selk_class'].append(cohen_kappa)
    fs_model_dict['selk_class'].append(hin_loss)
    fs_model_dict['selk_class'].append(ham_loss)
    fs_model_dict['selk_class'].append(logl_loss)

    # 4
    y_pred_selk_reg = model.fit(data[selk_reg_feat], target).predict(data[selk_reg_feat])
    accuracy = round(accuracy_score(target, y_pred_selk_reg), 2)
    recall = round(recall_score(target, y_pred_selk_reg), 2)
    precision = round(precision_score(target, y_pred_selk_reg), 2)
    f1 = round(f1_score(target, y_pred_selk_reg), 2)
    fbeta = round(fbeta_score(target, y_pred_selk_reg, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_selk_reg), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_selk_reg), 2)
    hin_loss = round(hinge_loss(target, y_pred_selk_reg), 2)
    ham_loss = round(hamming_loss(target, y_pred_selk_reg), 2)
    logl_loss = round(log_loss(target, y_pred_selk_reg), 2)
    fs_model_dict['selk_reg'].append(accuracy)
    fs_model_dict['selk_reg'].append(recall)
    fs_model_dict['selk_reg'].append(precision)
    fs_model_dict['selk_reg'].append(f1)
    fs_model_dict['selk_reg'].append(fbeta)
    fs_model_dict['selk_reg'].append(roc_auc)
    fs_model_dict['selk_reg'].append(cohen_kappa)
    fs_model_dict['selk_reg'].append(hin_loss)
    fs_model_dict['selk_reg'].append(ham_loss)
    fs_model_dict['selk_reg'].append(logl_loss)

    # 5
    y_pred_sfm_dt = model.fit(data[sfm_dt_feat], target).predict(data[sfm_dt_feat])
    accuracy = round(accuracy_score(target, y_pred_sfm_dt), 2)
    recall = round(recall_score(target, y_pred_sfm_dt), 2)
    precision = round(precision_score(target, y_pred_sfm_dt), 2)
    f1 = round(f1_score(target, y_pred_sfm_dt), 2)
    fbeta = round(fbeta_score(target, y_pred_sfm_dt, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_sfm_dt), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_sfm_dt), 2)
    hin_loss = round(hinge_loss(target, y_pred_sfm_dt), 2)
    ham_loss = round(hamming_loss(target, y_pred_sfm_dt), 2)
    logl_loss = round(log_loss(target, y_pred_sfm_dt), 2)
    fs_model_dict['sfm_dt'].append(accuracy)
    fs_model_dict['sfm_dt'].append(recall)
    fs_model_dict['sfm_dt'].append(precision)
    fs_model_dict['sfm_dt'].append(f1)
    fs_model_dict['sfm_dt'].append(fbeta)
    fs_model_dict['sfm_dt'].append(roc_auc)
    fs_model_dict['sfm_dt'].append(cohen_kappa)
    fs_model_dict['sfm_dt'].append(hin_loss)
    fs_model_dict['sfm_dt'].append(ham_loss)
    fs_model_dict['sfm_dt'].append(logl_loss)

    # 6
    y_pred_sfm_rf = model.fit(data[sfm_rf_feat], target).predict(data[sfm_rf_feat])
    accuracy = round(accuracy_score(target, y_pred_sfm_rf), 2)
    recall = round(recall_score(target, y_pred_sfm_rf), 2)
    precision = round(precision_score(target, y_pred_sfm_rf), 2)
    f1 = round(f1_score(target, y_pred_sfm_rf), 2)
    fbeta = round(fbeta_score(target, y_pred_sfm_rf, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_sfm_rf), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_sfm_rf), 2)
    hin_loss = round(hinge_loss(target, y_pred_sfm_rf), 2)
    ham_loss = round(hamming_loss(target, y_pred_sfm_rf), 2)
    logl_loss = round(log_loss(target, y_pred_sfm_rf), 2)
    fs_model_dict['sfm_rf'].append(accuracy)
    fs_model_dict['sfm_rf'].append(recall)
    fs_model_dict['sfm_rf'].append(precision)
    fs_model_dict['sfm_rf'].append(f1)
    fs_model_dict['sfm_rf'].append(fbeta)
    fs_model_dict['sfm_rf'].append(roc_auc)
    fs_model_dict['sfm_rf'].append(cohen_kappa)
    fs_model_dict['sfm_rf'].append(hin_loss)
    fs_model_dict['sfm_rf'].append(ham_loss)
    fs_model_dict['sfm_rf'].append(logl_loss)

    # 7
    y_pred_sfm_xgb = model.fit(data[sfm_xgb_feat], target).predict(data[sfm_xgb_feat])
    accuracy = round(accuracy_score(target, y_pred_sfm_xgb), 2)
    recall = round(recall_score(target, y_pred_sfm_xgb), 2)
    precision = round(precision_score(target, y_pred_sfm_xgb), 2)
    f1 = round(f1_score(target, y_pred_sfm_xgb), 2)
    fbeta = round(fbeta_score(target, y_pred_sfm_xgb, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_sfm_xgb), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_sfm_xgb), 2)
    hin_loss = round(hinge_loss(target, y_pred_sfm_xgb), 2)
    ham_loss = round(hamming_loss(target, y_pred_sfm_xgb), 2)
    logl_loss = round(log_loss(target, y_pred_sfm_xgb), 2)
    fs_model_dict['sfm_xgb'].append(accuracy)
    fs_model_dict['sfm_xgb'].append(recall)
    fs_model_dict['sfm_xgb'].append(precision)
    fs_model_dict['sfm_xgb'].append(f1)
    fs_model_dict['sfm_xgb'].append(fbeta)
    fs_model_dict['sfm_xgb'].append(roc_auc)
    fs_model_dict['sfm_xgb'].append(cohen_kappa)
    fs_model_dict['sfm_xgb'].append(hin_loss)
    fs_model_dict['sfm_xgb'].append(ham_loss)
    fs_model_dict['sfm_xgb'].append(logl_loss)

    # 8
    y_pred_sfm_log = model.fit(data[sfm_log_feat], target).predict(data[sfm_log_feat])
    accuracy = round(accuracy_score(target, y_pred_sfm_log), 2)
    recall = round(recall_score(target, y_pred_sfm_log), 2)
    precision = round(precision_score(target, y_pred_sfm_log), 2)
    f1 = round(f1_score(target, y_pred_sfm_log), 2)
    fbeta = round(fbeta_score(target, y_pred_sfm_log, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_sfm_log), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_sfm_log), 2)
    hin_loss = round(hinge_loss(target, y_pred_sfm_log), 2)
    ham_loss = round(hamming_loss(target, y_pred_sfm_log), 2)
    logl_loss = round(log_loss(target, y_pred_sfm_log), 2)
    fs_model_dict['sfm_log'].append(accuracy)
    fs_model_dict['sfm_log'].append(recall)
    fs_model_dict['sfm_log'].append(precision)
    fs_model_dict['sfm_log'].append(f1)
    fs_model_dict['sfm_log'].append(fbeta)
    fs_model_dict['sfm_log'].append(roc_auc)
    fs_model_dict['sfm_log'].append(cohen_kappa)
    fs_model_dict['sfm_log'].append(hin_loss)
    fs_model_dict['sfm_log'].append(ham_loss)
    fs_model_dict['sfm_log'].append(logl_loss)

    # 9
    y_pred_selp_class = model.fit(data[selp_class_feat], target).predict(data[selp_class_feat])
    accuracy = round(accuracy_score(target, y_pred_selp_class), 2)
    recall = round(recall_score(target, y_pred_selp_class), 2)
    precision = round(precision_score(target, y_pred_selp_class), 2)
    f1 = round(f1_score(target, y_pred_selp_class), 2)
    fbeta = round(fbeta_score(target, y_pred_selp_class, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_selp_class), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_selp_class), 2)
    hin_loss = round(hinge_loss(target, y_pred_selp_class), 2)
    ham_loss = round(hamming_loss(target, y_pred_selp_class), 2)
    logl_loss = round(log_loss(target, y_pred_selp_class), 2)
    fs_model_dict['selp_class'].append(accuracy)
    fs_model_dict['selp_class'].append(recall)
    fs_model_dict['selp_class'].append(precision)
    fs_model_dict['selp_class'].append(f1)
    fs_model_dict['selp_class'].append(fbeta)
    fs_model_dict['selp_class'].append(roc_auc)
    fs_model_dict['selp_class'].append(cohen_kappa)
    fs_model_dict['selp_class'].append(hin_loss)
    fs_model_dict['selp_class'].append(ham_loss)
    fs_model_dict['selp_class'].append(logl_loss)

    # 10
    y_pred_selp_reg = model.fit(data[selp_reg_feat], target).predict(data[selp_reg_feat])
    accuracy = round(accuracy_score(target, y_pred_selp_reg), 2)
    recall = round(recall_score(target, y_pred_selp_reg), 2)
    precision = round(precision_score(target, y_pred_selp_reg), 2)
    f1 = round(f1_score(target, y_pred_selp_reg), 2)
    fbeta = round(fbeta_score(target, y_pred_selp_reg, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_selp_reg), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_selp_reg), 2)
    hin_loss = round(hinge_loss(target, y_pred_selp_reg), 2)
    ham_loss = round(hamming_loss(target, y_pred_selp_reg), 2)
    logl_loss = round(log_loss(target, y_pred_selp_reg), 2)
    fs_model_dict['selp_reg'].append(accuracy)
    fs_model_dict['selp_reg'].append(recall)
    fs_model_dict['selp_reg'].append(precision)
    fs_model_dict['selp_reg'].append(f1)
    fs_model_dict['selp_reg'].append(fbeta)
    fs_model_dict['selp_reg'].append(roc_auc)
    fs_model_dict['selp_reg'].append(cohen_kappa)
    fs_model_dict['selp_reg'].append(hin_loss)
    fs_model_dict['selp_reg'].append(ham_loss)
    fs_model_dict['selp_reg'].append(logl_loss)

    # 11
    y_pred_vt_50 = model.fit(data[vt_feat_50], target).predict(data[vt_feat_50])
    accuracy = round(accuracy_score(target, y_pred_vt_50), 2)
    recall = round(recall_score(target, y_pred_vt_50), 2)
    precision = round(precision_score(target, y_pred_vt_50), 2)
    f1 = round(f1_score(target, y_pred_vt_50), 2)
    fbeta = round(fbeta_score(target, y_pred_vt_50, beta=2.5), 2)
    roc_auc = round(roc_auc_score(target, y_pred_vt_50), 2)
    cohen_kappa = round(cohen_kappa_score(target, y_pred_vt_50), 2)
    hin_loss = round(hinge_loss(target, y_pred_vt_50), 2)
    ham_loss = round(hamming_loss(target, y_pred_vt_50), 2)
    logl_loss = round(log_loss(target, y_pred_vt_50), 2)
    fs_model_dict['vt_50'].append(accuracy)
    fs_model_dict['vt_50'].append(recall)
    fs_model_dict['vt_50'].append(precision)
    fs_model_dict['vt_50'].append(f1)
    fs_model_dict['vt_50'].append(fbeta)
    fs_model_dict['vt_50'].append(roc_auc)
    fs_model_dict['vt_50'].append(cohen_kappa)
    fs_model_dict['vt_50'].append(hin_loss)
    fs_model_dict['vt_50'].append(ham_loss)
    fs_model_dict['vt_50'].append(logl_loss)

    return fs_model_dict